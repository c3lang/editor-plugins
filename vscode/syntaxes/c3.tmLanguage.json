{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "C3",
	"patterns": [
		{ "include": "#keywords"    },
		{ "include": "#comments"    },
		{ "include": "#strings"     },
		{ "include": "#numbers"     },
		{ "include": "#types"       },
		{ "include": "#support"     },
		{ "include": "#operators"   },
		{ "include": "#identifiers" }
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword",
					"match": "\\b(asm|assert|bitstruct|break|case|catch|const|continue)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(def|default|defer|distinct|do|else|enum|extern)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(false|fault|for|foreach|foreach_r|fn|tlocal|if)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(inline|import|macro|module|nextcase|null|return|static)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(struct|switch|true|try|union|var|while)\\b"
				},
				{
					"name": "keyword",
					"match": "\\b(%switch|$default|$case|$if|$typeof|$else|$sizeof|$for|$case)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line",
					"begin": "//",
					"end": "$"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double",
					"patterns": [ {"include": "#stringcontent"} ],
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.double",
					"patterns": [ {"include": "#stringcontent"} ],
					"begin": "b64\"",
					"end": "\""
				},
				{
					"name": "string.quoted.double",
					"patterns": [ {"include": "#stringcontent"} ],
					"begin": "x\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single",
					"patterns": [ {"include": "#stringcontent"} ],
					"begin": "'",
					"end": "'"
				},
				{
					"name": "string.quoted.single",
					"patterns": [ {"include": "#stringcontent"} ],
					"begin": "b64'",
					"end": "'"
				},
				{
					"name": "string.quoted.single",
					"patterns": [ {"include": "#stringcontent"} ],
					"begin": "x'",
					"end": "'"
				}
			]
		},
		"stringcontent": {
			"patterns": [
			  {
				"name": "constant.character.escape",
				"match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
			  },
			  {
				"name": "invalid.illegal.unrecognized-string-escape",
				"match": "\\\\."
			  }
			]
		  },
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric",
					"match": "\\b[0-9]\\.[0-9]+\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b[0-9]+\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b0x[a-fA-F0-9_]+\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b0o[0-7_]+\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b0b[01_]+\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.stdint.c3",
					"match": "\\b(bool|char|ichar|short|ushort|int|uint|long|ulong|int128|uint128|isz|usz|iptr|uptr|float16|float|double|float128)\\b"
				},
				{
					"name": "storage.type",
					"match": "\\b(any|anyfault|typeid|void)\\b"
				}
			]
		},
		"support": {
			"patterns": [
				{
					"name": "support.function.builtin",
					"match": "\\$[_a-zA-Z][_a-zA-Z0-9]*"
				},
				{
					"name": "support.function.macro",
					"match": "@[_a-zA-Z][_a-zA-Z0-9]*"
				}
			]
		},
		"operators": {
			"name": "keyword.operator",
			"match": "(\\+|-|\\.|%|&|\\|(?!})|=|<|>|!|\\^|\\*|/|::)=?"
		},
		"identifiers": {
			"patterns": [
				{
					"name": "entity.name.type.c3",
					"match": "[_A-Z][_a-zA-Z0-9]*"
				}
			]
		}
	},
	"scopeName": "source.c3"
}