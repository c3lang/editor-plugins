{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "C3",
    "scopeName": "source.c3",
    "fileTypes": [
        "c3",
        "c3i",
        "c3t"
    ],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#types"
        },
        {
            "include": "#support"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#structs"
        },
        {
            "include": "#enums"
        },
        {
            "include": "#macros"
        },
        {
            "include": "#expression_blocks"
        }
    ],
    "repository": {
        "variables": {
            "patterns": [
                {
                "name": "meta.function.declaration.c3",
                    "patterns": [
                        {
                            "match": "\\b(fn)\\s+([A-Z][a-zA-Z0-9]*)\\b"
                        },
                        {
                            "match": "\\b(fn)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b"
                        },
                        {
                            "begin": "\\b(fn)\\",
                            "end": "\"",
                            "name": "entity.name.function.string.c3",
                            "beginCaptures": {
                                "1": {
                                    "name": "entity.name.function.c3"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#stringcontent"
                                }
                            ]
                        },
                        {
                            "name": "keyword.default.c3",
                            "match": "\\b(fn)\\b"
                        }
                    ]
                },
                {
                    "name": "meta.function.call.c3",
                    "patterns": [
                        {
                            "name": "entity.name.function.c3",
                            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*(?:::[a-zA-Z_][a-zA-Z0-9_]*)*)\\b(?=\\s*\\()"
                        },
                        {
                            "name": "variable.other.c3",
                            "match": "(?<=\\b(?:[a-zA-Z_][a-zA-Z0-9_]*(?:::[a-zA-Z_][a-zA-Z0-9_]*)*\\s*\\()|\\.)[a-zA-Z_][a-zA-Z0-9_]*"
                        },
                        {
                            "name": "constant.numeric.c3",
                            "match": "\\b[0-9]+\\.[0-9]+[fF]?\\b|\\b[0-9]+[dD]?\\b|\\b[0-9]+\\b"
                        },
                        {
                            "name": "constant.language.boolean.c3",
                            "match": "\\b(true|false)\\b"
                        },
                        {
                            "name": "punctuation.separator.c3",
                            "match": "\\."
                        },
                        {
                            "name": "punctuation.parenthesis.begin.c3",
                            "match": "\\("
                        },
                        {
                            "name": "punctuation.parenthesis.end.c3",
                            "match": "\\)"
                        }
                    ]
                },
                {
                    "name": "meta.variable.c3",
                    "patterns": [
                        {
                            "name": "variable.c3",
                            "match": "\\b(const\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)(\\s+[a-zA-Z_][a-zA-Z0-9_]*)\\s*=.*;"
                        },
                        {},
                        {
                            "name": "variable.other.c3",
                            "match": "(?<!\\w)([a-zA-Z_][a-zA-Z0-9_:]*)\\b"
                        },
                        {
                            "name": "constant.numeric.c3",
                            "match": "\\b[0-9]+\\.[0-9]+[fF]?\\b|\\b[0-9]+[dD]?\\b|\\b[0-9]+\\b"
                        },
                        {
                            "name": "constant.language.boolean.c3",
                            "match": "\\b(true|false)\\b"
                        },
                        {
                            "name": "constant.language.global.c3",
                            "match": "\\b[A-Z_]+\\b"
                        },
                        {
                            "begin": "@\"",
                            "end": "\"",
                            "name": "variable.string.c3",
                            "patterns": [
                                {
                                    "include": "#stringcontent"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "include": "#line_comment"
                },
                {
                    "include": "#block_comment"
                },
                {
                    "include": "#doc_comment"
                }
            ]
        },
        "line_comment": {
            "match": "//.*$",
            "name": "comment.line.double-slash.c3"
        },
        "block_comment": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block.c3"
        },
        "doc_comment": {
            "begin": "/\\*\\*",
            "end": "\\*/",
            "name": "comment.block.documentation.c3",
            "patterns": [
                {
                    "match": "@(param(\\s*\\[&?(in|out|inout)\\])?|return!?|require|fails|deprecated|ensure|pure)\\s",
                    "name": "keyword.context.c3"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword",
                    "match": "\\b(asm|assert|break|case|catch|const|continue)\\b"
                },
                {
                    "name": "keyword",
                    "match": "\\b(def|default|defer|distinct|do|else|extern)\\b"
                },
                {
                    "name": "keyword",
                    "match": "\\b(false|fault|for|foreach|foreach_r|fn|tlocal|if)\\b"
                },
                {
                    "name": "keyword.statement.c3",
                    "match": "\\b(inline|import|macro|module|nextcase|null|return|static|this)\\b"
                },
                {
                    "name": "keyword.control.flow.c3",
                    "match": "\\b(switch|true|try|var|while)\\b"
                },
                {
                    "name": "keyword.control.flow.c3",
                    "match": "\\b(%switch|$default|$case|$if|$typeof|$else|$sizeof|$for|$case)\\b"
                },
                {
                    "name": "keyword.type.integer.c3",
                    "match": "\\b(bool*|ichar|char|short|ushort|int|uint|long|ulong|int128|uint128|iptr**|isz**|usz**)\\b"
                },
                {
                    "name": "keyword.type.float.c3",
                    "match": "\\b(float16*|float|double|float128*)\\b"
                },
                {
                    "name": "keyword.type.float.constants.c3",
                    "match": "\\b(f16|f32|f|f64|f128)\\b"
                },
                {
                    "name": "keyword.type.c.c3",
                    "match": "\\b(CChar|CShort|CUShort|CInt|CUInt|CLong|CLongLong|CULong|CULongLong|CLongDouble)\\b"
                },
                {
                    "name": "keyword.structure.c3",
                    "match": "\\b(struct|enum|union|bitstruct)\\b"
                },
                {
                    "name": "keyword.atributes.c3",
                    "match": "\\b(@align|@benchmark|@bigendian|@builtin|@callc|@deprecated|@export|@extern|@finalizer|@if|@init|@inline|@littleendian|@local|@maydiscard|@naked|@nodiscard|@noinit|@noreturn|@nostrip|@obfuscate|@operator|@overlap|@packed|@private|@pure|@packed|@reflect|@section|@test|@unused|@used|@weak)\\b"
                },
                {
                    "name": "keyword.user.atributes.c3",
                    "match": "\\b(@[A-Z][a-zA-Z0-9]*)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.c3",
                    "patterns": [
                        {
                            "include": "#stringcontent"
                        }
                    ],
                    "begin": "\"",
                    "end": "\""
                },
                {
                    "name": "string.quoted.double.c3",
                    "patterns": [
                        {
                            "include": "#stringcontent"
                        }
                    ],
                    "begin": "b64\"",
                    "end": "\""
                },
                {
                    "name": "string.quoted.double.c3",
                    "patterns": [
                        {
                            "include": "#stringcontent"
                        }
                    ],
                    "begin": "x\"",
                    "end": "\""
                },
                {
                    "name": "string.quoted.single.c3",
                    "patterns": [
                        {
                            "include": "#stringcontent"
                        }
                    ],
                    "begin": "'",
                    "end": "'"
                },
                {
                    "name": "string.quoted.single.c3",
                    "patterns": [
                        {
                            "include": "#stringcontent"
                        }
                    ],
                    "begin": "b64'",
                    "end": "'"
                },
                {
                    "name": "string.quoted.single.c3",
                    "patterns": [
                        {
                            "include": "#stringcontent"
                        }
                    ],
                    "begin": "x'",
                    "end": "'"
                }
            ]
        },
        "stringcontent": {
            "patterns": [
                {
                    "name": "constant.character.escape.c3",
                    "match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
                },
                {
                    "name": "invalid.illegal.unrecognized-string-escape.c3",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.c3",
                    "match": "\\b[0-9]\\.[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.c3",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.c3",
                    "match": "\\b0x[a-fA-F0-9_]+\\b"
                },
                {
                    "name": "constant.numeric.c3",
                    "match": "\\b0o[0-7_]+\\b"
                },
                {
                    "name": "constant.numeric.c3",
                    "match": "\\b0b[01_]+\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.stdint.c3",
                    "match": "\\b(bool|char|ichar|short|ushort|int|uint|long|ulong|int128|uint128|isz|usz|iptr|uptr|float16|float|double|float128)\\b"
                },
                {
                    "name": "storage.type.c3",
                    "match": "\\b(any|anyfault|typeid|void)\\b"
                }
            ]
        },
        "support": {
            "patterns": [
                {
                    "name": "support.function.builtin.c3",
                    "match": "\\$[_a-zA-Z][_a-zA-Z0-9]*"
                },
                {
                    "name": "support.function.macro.c3",
                    "match": "@[_a-zA-Z][_a-zA-Z0-9]*"
                }
            ]
        },
        "operators": {
            "name": "keyword.operator.c3",
            "match": "(\\+|-|\\.|%|&|\\|(?!})|=|<|>|!|\\^|\\*|/|::)=?"
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "entity.name.type.c3",
                    "match": "[_A-Z][_a-zA-Z0-9]*"
                }
            ]
        },
		"top_level": {
			"patterns": [
			  {
				"match": "\\b(struct|bitstruct)\\b",
				"name": "keyword.declaration.struct.c3"
			  },
			  {
				"match": "\\bunion\\b",
				"name": "keyword.declaration.union.c3"
			  },
			  {
				"match": "\\b(enum|fault)\\b",
				"name": "keyword.declaration.enum.c3"
			  },
			  {
				"match": "\\binterface\\b",
				"name": "keyword.declaration.interface.c3"
			  }
			]
		  }
    }
   
}